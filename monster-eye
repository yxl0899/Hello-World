//Alvin Lin
Monster m;
int BodyPX = 200; 
int MouthPX = 300;
int HandPX = 200;
int FeetPX = 240;
void setup() {
  size(750, 750);
  m = new Monster(250, 250);
}

void draw() {
m.update(mouseX, mouseY);
m.display();
}

class Monster
{
  float monsterX;
  float monsterY;
  Eye leye;
  Eye reye;
  boolean bover = false;
  boolean locked = false;
  float bdifx =0.0;
  float bdify = 0.0;
  Monster(int x, int y) {
    monsterX = x;
    monsterY = y;
    leye = new Eye(250, 210);
    reye = new Eye(350, 210);
  }
void update(int mx, int my) {
  leye.update(mx-monsterX, my-monsterY);
  reye.update(mx-monsterX, my-monsterY);
  
  if(isInside(mx, my))
  {
    bover = true;
  }
  else
  {
    bover = false;
  }
}

boolean isInside(int mx, int my) {
  if (leye.isInside(my-monsterX, my-monsterY))
  {
    return true;
  }
  if (reye.isInside(mx-monsterX, my-monsterY))
  {
    return true;
  }
  return false;
}

void display() {
  pushMatrix();
//ground
background(0);
line(0, 504, 750, 504);
//Body
noStroke();
fill(255);
beginShape();
vertex(BodyPX, 200);
vertex(BodyPX-10, 500);
vertex(BodyPX+218, 500);
vertex(BodyPX+200, 200);
endShape();
arc(BodyPX+100, 200, 200, 200, PI, PI+PI); 
if (keyPressed){
  if (key == CODED){
    if(keyCode == RIGHT)BodyPX += 5;
    else if(keyCode == LEFT)BodyPX -= 5;
  }
}
//Mouth
stroke(0);
fill(#FCED3D);
ellipse(MouthPX, 270, 124, 60);
line(MouthPX-62, 270, MouthPX+62, 270);
if (keyPressed){
  if (key == CODED){
    if(keyCode == RIGHT)MouthPX += 5;
    else if(keyCode == LEFT)MouthPX -= 5;
  }
}
//Left hand
noStroke();
fill(255);
beginShape();
vertex(HandPX, 275);
vertex(HandPX-30, 350);
vertex(HandPX-40, 390);
vertex(HandPX-30, 395);
vertex(HandPX-4, 375);
endShape();
//Right hand
fill(255);
beginShape();
vertex(HandPX+203, 275);
vertex(HandPX+230, 350);
vertex(HandPX+240, 390);
vertex(HandPX+230, 395);
vertex(HandPX+204, 375);
endShape();
if (keyPressed){
  if (key == CODED){
    if(keyCode == RIGHT)HandPX += 5;
    else if(keyCode == LEFT)HandPX -= 5;
  }
}
//Feet
fill(#FCED3D);
ellipse(FeetPX, 500, 80, 20);
ellipse(FeetPX+120, 500, 80, 20);
if (keyPressed){
  if (key == CODED){
    if(keyCode == RIGHT)FeetPX += 5;
    else if(keyCode == LEFT)FeetPX -= 5;
  }
}
leye.display();
reye.display();
popMatrix();
}

class Eye 
{
  final static int MAX_EYE_SIZE = 100;
  final static int MIN_EYE_SIZE = 20;
  int ex, ey;
  float size;
  float velocity;
  float angle = 0.0;
  
  Eye(int x, int y) {
    ex = x;
    ey = y;    
    size = random(MIN_EYE_SIZE, MAX_EYE_SIZE);
  }
 
  boolean isInside(float mx, float my) {
   float distance = sqrt(sq(ex - mx) + sq(ey - my));
   if (distance <= size)
   {
     return true;
   }
   else
   {
     return false;
   }
  }
 
  void update(float mx, float my) {
    angle = atan2(my-ey, mx-ex);
    size += velocity;
    if (size > MAX_EYE_SIZE) {
      velocity = -velocity;
    }
    if (size < MIN_EYE_SIZE) {
      velocity = -velocity;  
    }
  }
 
  void display() {
    pushMatrix();
    translate(ex, ey);
    fill(255);
    stroke(0);
    ellipse(0, 0, 50, 50);
    rotate(angle);
    fill(0);
    ellipse(size/4, 0, 7, 7);
    popMatrix();}
}
}
